@using src.Core
@{
    ViewData["Title"] = Constants.MainPages.Dashboard;
}

@{
    DateTime currentDate = DateTime.Now;
    string formattedDate = currentDate.ToString("dd - MM - yyyy");

    var meals = new List<src.Core.Domains.Meal>();
    if (Model != null)
        foreach (var item in Model)
        {
            meals.Add(item);
        }
    // Serialize campusCode to JSON and embed it in JavaScript
    var mealList = Newtonsoft.Json.JsonConvert.SerializeObject(meals);
 
}

@model IEnumerable<src.Core.Domains.Meal>


<section class="content-header">
    <h1>
       @ViewData["Title"]
       <small>Control panel</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Dashboard</li>
    </ol>
</section>

<div class="content">
    <div class="row">
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3>@Constants.MainPages.Users</h3>
                    <p>Users</p>
                </div>
                <div class="icon"><i class="fa fa-user"></i></div>
                <a href="@Url.Action("Index", "Users")" class="small-box-footer show-progress">
                    More info <i class="fa fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-maroon">
                <div class="inner">
                    <h3>Application</h3>
                    <p>Application logs</p>
                </div>
                <div class="icon"><i class="fa fa-exclamation-triangle"></i></div>
                <a href="@Url.Action("Index", "Logs")" class="small-box-footer show-progress">
                    More info <i class="fa fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">Meals Summary Report</h3>

                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>                       
                    </div>
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-12">
                            <p class="text-center">
                                <strong>Date: @formattedDate</strong>
                            </p>
                            <div class="chart">
                                <!-- Sales Chart Canvas -->
                                <canvas id="mealChart" style="height: 180px;"></canvas>
                            </div>
                            <!-- /.chart-responsive -->
                        </div>
                       
                    </div>
                    <!-- /.row -->
                </div>
                <!-- ./box-body -->
                <div class="box-footer">
                    <div class="row">
                        <div class="col-sm-3 col-xs-6">
                            <div class="description-block border-right">
                                <h5 class="description-header">@Model.Count()</h5>
                                <span class="description-text">TOTAL MEALS</span>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <!-- /.col -->
                        <div class="col-sm-3 col-xs-6">
                            <div class="description-block border-right">
                                <h5 class="description-header">@Model.Where(x => x.Status == 0).Count()</h5>
                                <span class="description-text">TOTAL ACTIVE MEAL</span>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <!-- /.col -->
                        <div class="col-sm-3 col-xs-6">
                            <div class="description-block border-right">
                                <h5 class="description-header">@Model.Where(x => x.Status == 1).Count()</h5>
                                <span class="description-text">TOTAL DEACTIVE MEAL</span>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <!-- /.col -->
                        <div class="col-sm-3 col-xs-6">
                            <div class="description-block">
                                <h5 class="description-header">@Model.Select(s => s.StudentCode).Distinct().Count()</h5>
                                <span class="description-text">Students Registered</span>
                            </div>
                            <!-- /.description-block -->
                        </div>
                    </div>
                    <!-- /.row -->
                </div>
                <!-- /.box-footer -->
            </div>
            <!-- /.box -->
        </div>
        <!-- /.col -->
    </div>
</div>

<script>
   

        var mealList = @Html.Raw(mealList);

        var currentDate = new Date();

        var mealCounts = [];

        var startDate = new Date(currentDate);
        startDate.setMonth(startDate.getMonth() - 6);
        
        var sixMonths = [];
        for (var i = 0; i < 6; i++) {
            var d = new Date(currentDate);
            d.setMonth(d.getMonth() - i);
            sixMonths.push(d.getMonth() + 1 + '/' + d.getFullYear());
        }

        for (var i = 0; i < 6; i++) {
            var startOfMonth = new Date(currentDate);
            startOfMonth.setMonth(startOfMonth.getMonth() - i);
            startOfMonth.setDate(1);
            startOfMonth.setHours(0, 0, 0, 0);

            var endOfMonth = new Date(currentDate);
            endOfMonth.setMonth(endOfMonth.getMonth() - i + 1);
            endOfMonth.setDate(0);
            endOfMonth.setHours(23, 59, 59, 999);

            var mealsInMonth = mealList.filter(function (meal) {
                var mealDate = new Date(meal.CreatedAt);
                return mealDate >= startOfMonth && mealDate <= endOfMonth;
            });

            mealCounts.push(mealsInMonth.length);
        }

      

      
        var salesChartCanvas = $("#mealChart").get(0).getContext("2d");     
        var salesChart = new Chart(salesChartCanvas);
        var salesChartData = {
            labels: sixMonths.reverse(),
            datasets: [

                {
                    label: 'Số lượng meal',
                    fillColor: "rgba(60,141,188,0.9)",
                    strokeColor: "rgba(60,141,188,0.8)",
                    pointColor: "#3b8bba",
                    pointStrokeColor: "rgba(60,141,188,1)",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(60,141,188,1)",
                    data: mealCounts.reverse(),
                }
            ]
        };

    var salesChartOptions = {
        //Boolean - If we should show the scale at all
        showScale: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.3,
        //Boolean - Whether to show a dot for each point
        pointDot: false,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a color
        datasetFill: true,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%=datasets[i].label%></li><%}%></ul>",
        //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: true,
        //Boolean - whether to make the chart responsive to window resizing
        responsive: true
    };

    //Create the line chart
    salesChart.Line(salesChartData, salesChartOptions);

      //---------------------------
      //- END MONTHLY SALES CHART -
      //---------------------------
    
</script>